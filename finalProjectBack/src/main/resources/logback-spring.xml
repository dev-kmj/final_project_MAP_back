<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="15 seconds">
    <property name="LOGS_ABSOLUTE_PATH" value="./logs"/>
<!--appender(어디에 출력할 지)에서 콘솔에 출력되는 형식을 지정한다.
        pattern 에서 지정한 방식대로 시간과 레벨 등의 설정이 되고난 후 콘솔에 메세지를 출력한다.
        해당 append 설정은 STDOUT 이라는 변수명으로 저장해뒀다고 생각하면 된다.-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{36} - %msg%n</Pattern>
        </layout>
    </appender>
<!--Info 레벨의 이름을 가진 로그를 저장할 방식을 지정한다.INFO_LOG라는 변수명에 여러 가지 설정을 한다.
            우선 파일을 저장할 경로와 파일명을 지정한다. INFO level 의 에러만 기록한다.
            기록한 로그를 pattern 에서 지정한 방식대로 인코딩한다.
            인코딩한 로그기록을 앞서 지정한 파일명에 기록하는 것이다.
            파일의 크기가 100MB 혹은 180일이 넘을 경우 앞서 인코딩한 파일을 fileNamePattern 에 맞게 .gz 로 따로 저장한다는 설정이다.
            비슷한 방식으로 WARN_LOG 도 만들어준다.-->
    <appender name="INFO_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">

<!--        <file>/var/logs/info.log</file> &lt;!&ndash; 파일을 저장할 경로를 정한다 &ndash;&gt;-->
        <file>/var/log/info.log</file> <!-- 파일을 저장할 경로를 정한다 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch> <!-- 해당 레벨만 기록한다. -->
            <onMismatch>DENY</onMismatch> <!-- 다른 수준의 레벨은 기록하지 않는다.(상위 레벨도 기록 안함), 상위 수준의 레벨에 대한 기록을 원하면 ACCEPT 로 하면 기록된다. -->
        </filter> <!-- 레벨별 필터링이 필요없을 경우 filter class 관련된 부분을 삭제하면 됨-->
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</pattern> <!-- 해당 패턴 네이밍으로 현재 로그가 기록됨 -->
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>./was-logs/info.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern> <!-- 해당 패턴 네이밍으로 이전 파일이 기록됨 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize> <!-- 한 파일의 최대 용량 -->
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>180</maxHistory> <!-- 한 파일의 최대 저장 기한 -->
        </rollingPolicy>
    </appender>

    <appender name="WARN_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <file>/var/log/warn.log</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>./was-logs/warn.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>180</maxHistory>
        </rollingPolicy>
    </appender>

    <appender name="ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <file>/var/log/error.log</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>./was-logs/error.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>180</maxHistory>
        </rollingPolicy>
    </appender>

<!-- Info 레벨의 로그를 콘솔에 출력한다.-->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
    </root>
<!--로거가 발생될 때, 설정해둔 대상을 파일에 기록한다-->
<!--    LogController 라는 이름의 로거가 발생할 때 아래 조건을 실행한다.
Debug 이상의 레벨에 대해서 각각 <appender-ref ref="INFO_LOG" /> 와 <appender-ref ref="WARN_LOG" /> 의 변수에 할당해둔 명령이 실행된다.-->
    <logger name="com.sparta.finalprojectback" additivity="false"> <!-- 콘솔에 출력된 LogController 에 대해서 아래 작업을 실행한다.-->
        <level value = "DEBUG" /> <!-- DEBUG 레벨 이상에서만 실행한다. -->
        <appender-ref ref="INFO_LOG" />
        <appender-ref ref="WARN_LOG" />
        <appender-ref ref="ERROR_LOG" />
    </logger>

    <logger name="org.hibernate.SQL" additivity="false">
        <level value = "DEBUG" />
        <appender-ref ref="INFO_LOG" />
        <appender-ref ref="WARN_LOG" />
        <appender-ref ref="ERROR_LOG" />
    </logger>

</configuration>